name: CI – Flask Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
        # Healthcheck para esperar a que Mongo esté listo
        options: >-
          --health-cmd "mongo --eval 'db.adminCommand(\"ping\")'" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    env:
      # Asegura que tu aplicación use la BD de test
      MONGO_URI: mongodb://localhost:27017/clinica_test
      FLASK_ENV: development

    steps:
      - name: 🛎️ Checkout repo
        uses: actions/checkout@v3

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 📦 Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 🏗️ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: ⏳ Wait for MongoDB
        run: |
          # Espera hasta que mongo responda al ping
          for i in {1..10}; do
            mongo --eval "db.adminCommand('ping')" && break
            echo "Esperando a MongoDB…"
            sleep 3
          done

      - name: 🧪 Run pytest
        run: |
          pytest --maxfail=1 --disable-warnings -q
